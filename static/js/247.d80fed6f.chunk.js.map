{"version":3,"file":"static/js/247.d80fed6f.chunk.js","mappings":"8LA0CA,UArCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,YAA5B,eAAOC,EAAP,KAAeC,EAAf,KASA,OARAC,EAAAA,EAAAA,YAAU,WACR,OACEC,EAAAA,EAAAA,IAAWN,GAERO,MAAK,SAACC,GAAD,OAAcJ,EAAUI,EAASC,SACtCC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,QAEjC,CAACX,KAEF,yBACGG,GACCA,EAAOW,KAAI,SAACC,GACV,OACE,4BACE,gBACEC,IACED,EAAME,aAAN,0CACuCF,EAAME,cACzC,+FAENC,IAAKH,EAAMI,KACXC,MAAM,QAER,yBACE,wBAAKL,EAAMI,UAEb,uBAAIJ,EAAMM,cAbFN,EAAMO,W,oLCrBtBC,EAAW,+BACXC,EAAM,mC,SAGGC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAqBC,EAArB,+BAA2B,GAAIC,EAA/B,+BAAwC,GAAxC,SACyBC,MAAMF,EAAKC,GADpC,YACQnB,EADR,QAEkBqB,GAFlB,iCAGYrB,EAASsB,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOT,EAAM,GAAD,OAAIF,EAAJ,qCAAyCC,IAGhD,SAASW,EAAeC,GAC7B,OAAOX,EAAM,GAAD,OACPF,EADO,iCAC0BC,EAD1B,iCACsDY,EADtD,gCAIP,SAASC,EAAarC,GAC3B,OAAOyB,EAAM,GAAD,OAAIF,EAAJ,kBAAsBvB,EAAtB,oBAAyCwB,EAAzC,oBAEP,SAASlB,EAAWN,GACzB,OAAOyB,EAAM,GAAD,OACPF,EADO,kBACWvB,EADX,4BACsCwB,EADtC,oBAIP,SAASc,EAAatC,GAC3B,OAAOyB,EAAM,GAAD,OACPF,EADO,kBACWvB,EADX,4BACsCwB,EADtC","sources":["components/Cast/Cast.jsx","utils/Api.jsx"],"sourcesContent":["/* eslint-disable jsx-a11y/alt-text */\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { fetchCasts } from \"../../utils/Api\";\r\n\r\nconst Cast = () => {\r\n  const { movieId } = useParams();\r\n  const [actors, setActors] = useState();\r\n  useEffect(() => {\r\n    return (\r\n      fetchCasts(movieId)\r\n        // .then(setActors)\r\n        .then((response) => setActors(response.cast))\r\n        .catch((error) => console.log(error))\r\n    );\r\n  }, [movieId]);\r\n  return (\r\n    <div>\r\n      {actors &&\r\n        actors.map((actor) => {\r\n          return (\r\n            <div key={actor.id}>\r\n              <img\r\n                src={\r\n                  actor.profile_path\r\n                    ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\r\n                    : \"https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg\"\r\n                }\r\n                alt={actor.name}\r\n                width=\"80\"\r\n              />\r\n              <ul>\r\n                <li>{actor.name}</li>\r\n              </ul>\r\n              <p>{actor.character}</p>\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cast;\r\n","const BASE_URL = \"https://api.themoviedb.org/3\";\r\nconst key = \"a4de87479d087ab06b31a45a7a77ca83\";\r\n// const API = `${url}?api_key=${key}&${param}`;\r\n\r\nasync function Fetch(url = \"\", params = {}) {\r\n  const response = await fetch(url, params);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchHomePage() {\r\n  return Fetch(`${BASE_URL}/trending/all/day?api_key=${key}`);\r\n}\r\n\r\nexport function fetchMoviePage(query) {\r\n  return Fetch(\r\n    `${BASE_URL}/search/movie?api_key=${key}&language=en-US&query=${query}&page=1&include_adult=false`\r\n  );\r\n}\r\nexport function fetchMovieId(movieId) {\r\n  return Fetch(`${BASE_URL}/movie/${movieId}?api_key=${key}&language=en-US`);\r\n}\r\nexport function fetchCasts(movieId) {\r\n  return Fetch(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${key}&language=en-US`\r\n  );\r\n}\r\nexport function fetchReviews(movieId) {\r\n  return Fetch(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${key}&language=en-US`\r\n  );\r\n}\r\n"],"names":["movieId","useParams","useState","actors","setActors","useEffect","fetchCasts","then","response","cast","catch","error","console","log","map","actor","src","profile_path","alt","name","width","character","id","BASE_URL","key","Fetch","url","params","fetch","ok","json","Promise","reject","Error","fetchHomePage","fetchMoviePage","query","fetchMovieId","fetchReviews"],"sourceRoot":""}