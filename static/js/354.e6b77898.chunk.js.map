{"version":3,"file":"static/js/354.e6b77898.chunk.js","mappings":"yQACaA,EAASC,EAAAA,GAAAA,OAAH,sNAWNC,EAAYD,EAAAA,GAAAA,IAAH,mGAMTE,EAAWF,EAAAA,GAAAA,IAAH,qDAGRG,EAAQH,EAAAA,GAAAA,KAAH,6EAKLI,EAAeJ,EAAAA,GAAAA,GAAH,gF,SC6CzB,EA5DyB,WAAO,IAAD,EACrBK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KAQA,OANAC,EAAAA,EAAAA,YACE,kBAAMC,EAAAA,EAAAA,IAAaN,GAASO,MAAK,SAACC,GAAD,OAAcJ,EAASI,QACxD,CAACR,KAKD,iCACE,UAACN,EAAD,YACE,SAAC,MAAD,CAAae,MAAO,CAAEC,YAAa,MACnC,SAAC,KAAD,CAAMC,GAAG,IAAT,wBAEDR,IACC,iCACE,UAACP,EAAD,YACE,UAACC,EAAD,WACG,KACD,gBACEe,IACET,EAAMU,YAAN,0CACuCV,EAAMU,aACzC,+FAENC,IAAKX,EAAMY,eACXC,MAAM,YAGV,4BACE,wBAAKb,EAAMY,kBACX,sCACA,iCAAIZ,EAAMc,gBAAV,QAAsBd,EAAMe,SAC5B,oCACA,uBACGf,GACCA,EAAMgB,OAAOC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAT,OACf,SAACxB,EAAD,UAAiBuB,GAALC,eAKtB,mDACA,UAACvB,EAAD,YACE,yBACE,SAAC,KAAD,CAAMY,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,KAAD,Y,oLChEJY,EAAW,+BACXC,EAAM,mC,SAGGC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAqBC,EAArB,+BAA2B,GAAIC,EAA/B,+BAAwC,GAAxC,SACyBC,MAAMF,EAAKC,GADpC,YACQnB,EADR,QAEkBqB,GAFlB,iCAGYrB,EAASsB,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOT,EAAM,GAAD,OAAIF,EAAJ,qCAAyCC,IAGhD,SAASW,EAAeC,GAC7B,OAAOX,EAAM,GAAD,OACPF,EADO,iCAC0BC,EAD1B,iCACsDY,EADtD,gCAIP,SAAS9B,EAAaN,GAC3B,OAAOyB,EAAM,GAAD,OAAIF,EAAJ,kBAAsBvB,EAAtB,oBAAyCwB,EAAzC,oBAEP,SAASa,EAAWrC,GACzB,OAAOyB,EAAM,GAAD,OACPF,EADO,kBACWvB,EADX,4BACsCwB,EADtC,oBAIP,SAASc,EAAatC,GAC3B,OAAOyB,EAAM,GAAD,OACPF,EADO,kBACWvB,EADX,4BACsCwB,EADtC","sources":["components/MovieDetailsPage/CSSMovieDetailsPage.jsx","components/MovieDetailsPage/MovieDetailsPage.jsx","utils/Api.jsx"],"sourcesContent":["import styled from \"styled-components\";\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  color: black;\r\n  cursor: pointer;\r\n  opacity: 0.5;\r\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  max-width: 1170px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n`;\r\nexport const BlockImg = styled.div`\r\n  margin: 10px 10px 10px 0;\r\n`;\r\nexport const Genre = styled.span`\r\n  &:not(:first-child) {\r\n    margin-left: 5px;\r\n  }\r\n`;\r\nexport const ContainerNav = styled.ul`\r\n  display: block;\r\n  margin-left: 15px;\r\n  padding: 0;\r\n`;\r\n","import { FiArrowLeft } from \"react-icons/fi\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams, Link, Outlet } from \"react-router-dom\";\r\nimport { fetchMovieId } from \"../../utils/Api\";\r\nimport {\r\n  Button,\r\n  Container,\r\n  BlockImg,\r\n  Genre,\r\n  ContainerNav,\r\n} from \"./CSSMovieDetailsPage\";\r\nconst MovieDetailsPage = () => {\r\n  const { movieId } = useParams();\r\n  const [movie, setMovie] = useState(null);\r\n\r\n  useEffect(\r\n    () => fetchMovieId(movieId).then((response) => setMovie(response)),\r\n    [movieId]\r\n  );\r\n  // console.log(movieId);\r\n  // console.log(movie);\r\n  return (\r\n    <>\r\n      <Button>\r\n        <FiArrowLeft style={{ marginRight: 4 }} />\r\n        <Link to=\"/\">Go home</Link>\r\n      </Button>\r\n      {movie && (\r\n        <>\r\n          <Container>\r\n            <BlockImg>\r\n              {\" \"}\r\n              <img\r\n                src={\r\n                  movie.poster_path\r\n                    ? `https://image.tmdb.org/t/p/w500/${movie.poster_path}`\r\n                    : \"https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg\"\r\n                }\r\n                alt={movie.original_title}\r\n                width=\"200\"\r\n              />\r\n            </BlockImg>\r\n            <div>\r\n              <h1>{movie.original_title}</h1>\r\n              <h2>Overview</h2>\r\n              <p>{movie.overview ?? movie.title}</p>\r\n              <h3>Genres</h3>\r\n              <p>\r\n                {movie &&\r\n                  movie.genres.map(({ name, id }) => (\r\n                    <Genre key={id}>{name}</Genre>\r\n                  ))}\r\n              </p>\r\n            </div>\r\n          </Container>\r\n          <p>Additional information</p>\r\n          <ContainerNav>\r\n            <li>\r\n              <Link to=\"cast\">Cast</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"reviews\">Reviews</Link>\r\n            </li>\r\n          </ContainerNav>\r\n          <Outlet />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsPage;\r\n","const BASE_URL = \"https://api.themoviedb.org/3\";\r\nconst key = \"a4de87479d087ab06b31a45a7a77ca83\";\r\n// const API = `${url}?api_key=${key}&${param}`;\r\n\r\nasync function Fetch(url = \"\", params = {}) {\r\n  const response = await fetch(url, params);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchHomePage() {\r\n  return Fetch(`${BASE_URL}/trending/all/day?api_key=${key}`);\r\n}\r\n\r\nexport function fetchMoviePage(query) {\r\n  return Fetch(\r\n    `${BASE_URL}/search/movie?api_key=${key}&language=en-US&query=${query}&page=1&include_adult=false`\r\n  );\r\n}\r\nexport function fetchMovieId(movieId) {\r\n  return Fetch(`${BASE_URL}/movie/${movieId}?api_key=${key}&language=en-US`);\r\n}\r\nexport function fetchCasts(movieId) {\r\n  return Fetch(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${key}&language=en-US`\r\n  );\r\n}\r\nexport function fetchReviews(movieId) {\r\n  return Fetch(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${key}&language=en-US`\r\n  );\r\n}\r\n"],"names":["Button","styled","Container","BlockImg","Genre","ContainerNav","movieId","useParams","useState","movie","setMovie","useEffect","fetchMovieId","then","response","style","marginRight","to","src","poster_path","alt","original_title","width","overview","title","genres","map","name","id","BASE_URL","key","Fetch","url","params","fetch","ok","json","Promise","reject","Error","fetchHomePage","fetchMoviePage","query","fetchCasts","fetchReviews"],"sourceRoot":""}